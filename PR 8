#include<iostream>
#define SIZE 10
using namespace std;
class Optimal
{
private:
int p[SIZE]; //probability for searching element
int q[SIZE]; // probability that element not found
int a[SIZE]; // OBST is to built from elements
int w[SIZE][SIZE]; // weight
int c[SIZE][SIZE]; // cost 
int r[SIZE][SIZE]; // represent root
int n;
int front,rear,queue[20];
public:
 Optimal();
void get_data();
int Min_Value(int,int);
void OBST();
void build_tree();
};
Optimal::Optimal()
{
front=rear=-1;
}
void Optimal::get_data()
{
int i;
cout<<"Optimal Binary Search Tree"<<endl;
cout<<"Enter number of nodes : ";
cin>>n;
cout<<"Enter data as :\n";
for(i=1;i<=n;i++)
{
cout<<"a["<<i<<"] : ";
cin>>a[i];
}
cout<<"Enter probabilities for successful search :\n";
for(i=1;i<=n;i++)
{
cout<<"p["<<i<<"] : ";
cin>>p[i];
}
cout<<"Enter probabilities for unsuccessful search :\n";
for(i=0;i<=n;i++)
{
cout<<"q["<<i<<"] : ";
cin>>q[i];
}
}
int Optimal::Min_Value(int i,int j)
{
int m,k;
int minimum=32000;
for(m=r[i][j-1];m<=r[i+1][j];m++)
{
if(c[i][m-1]+c[m][j]<minimum)
{
minimum=c[i][m-1]+c[m][j];
k=m;
}
}
return k;
}
void Optimal::OBST()
{
int i,j,k,m;
for(i=0;i<n;i++)
{
w[i][i]=q[i];
r[i][i]=c[i][i]=0;
w[i][i+1]=q[i]+q[i+1]+p[i+1];
r[i][i+1]=i+1;
c[i][i+1]=q[i]+q[i+1]+p[i+1];
}
w[n][n]=q[n];
r[n][n]=c[n][n]=0;
for(m=2;m<=n;m++)
{
for(i=0;i<=n-m;i++)
{
j=i+m;
w[i][j]=w[i][j-1]+p[j]+q[j];
k=Min_Value(i,j);
c[i][j]=w[i][j]+c[i][k-1]+c[k][j];
r[i][j]=k;
}
}
}
void Optimal::build_tree()
{
int i,j,k;
cout<<"Optimal Binary Search Tree for given nodes is : "<<endl;
cout<<"Root of this OBST is : "<<r[0][n]<<endl;
cout<<"Cost of this OBST is : "<<c[0][n]<<endl;
queue[++rear]=0;
queue[++rear]=n;
while(front!=rear)
{
i=queue[++front];
j=queue[++front];
k=r[i][j];
cout<<k;
if(r[i][k-1]!=0)
{
cout<<" "<<r[i][k-1];
queue[++rear]=i;
 queue[++rear]=k-1;
}
else
{
cout<<" ";
}
if(r[k][j]!=0)
{
cout<<" "<<r[k][j];
queue[++rear]=k;
queue[++rear]=j;
}
else
{
cout<<" ";
}
}
cout<<endl;
}
int main()
{
Optimal obj;
obj.get_data();
obj.OBST();
obj.build_tree();
}
